パラメータの注意点
多くなると、可読性が悪い、パフォーマンスが悪い

メソッドを呼び出す時、callstackを発生しているので、メモリを考慮しなければいけいない
再帰の終了条件が不正に応じて無限ループ発生

演算式を解析
中置記法⇒後置記法
演算式を演算

switchはif elseよりパフォーマンスが良い

制約は関連性





林

命名を注意
パケージ全体のネイミングのセンス

C+S+F


Tokenクラス
Line5〜7
　命名

Line48
　優先順位のつもりではないが、実現した


Particalクラス
Line19
　命名

Line29
　初期化しなくてもよい
　newすることは絶対ダメ

Line33
　数字　演算子　数字のルールを常にチェックしている
　minus、addパラメータの必要性がない
　メソッド自体が無くしても良い
　　Line78〜80で同様の処理をやっている

Line95〜101
　より簡潔の処理になるのでは？

Line78〜80
　処理はFor内も処理すべき

Line126〜139
　小数点の処理時、パフォーマンス良いの処理にすべき
　時間があれば、検証して、どれか優れているのを選ぶ

Line61
　単純の引き算にすれば


Changeクラス
全体的に改善する余地がある




鍾
全体的の処理区別
コンパイラ時と実行時のエラー
｛｝を注意、メンテナンス時の便利さを考慮上、付けるべき


Calculaterクラス
全体的のロジックを見直す

　解析のメソッドがない

Line15
　優先順位は問題ない？

Line27〜62
　トークンの抽出しながらチェックを行えば
　すべての式要素を考慮すべき

Line129〜145
　パフォーマンス



鄭
ネイミングを注意
オペレータとオペランド

Arithmeticクラス
Line28〜34
　数値の処理は考慮不足

Line67〜107
　逆ポーランドの処理をもっと考えるべき

全体的の処理を整理すべき





