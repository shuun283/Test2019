柔軟性、堅牢性
システム復旧時間
平均修復時間
意識：哲学、考え方、理論
受動的な勉強→主動的な勉強
時間のロスを考慮し、コードの可読性をアップすべき

鐘
いつ、どこで、なにが発生したかを明確にすること
命名のセンス
javadocのルール

Calculatorクラス
Line12　元の文字列に対する修正は禁止
パフォーマンスがよくない　string.replace
（保守性）柔軟性が高く、堅牢性が低く

Line16　スレードセーフ
StringBuffer　StringBuild

Line21　chars[i]をローカル変数化にすべき
負数の考慮が足りない
（１＋２）ー３

JDKのメソッドはパフォーマンスが悪い
個別実装にすべきs
('0' <= c && <= '9')

林
チャレンジは凄い

AnalyzeUtilクラス
Line105　finalを活用

Line122〜127　論理結果を直接戻り値にすべき
return '0' <= c && c <= '9';

RunCalculateクラス
Line42
例外のLogに出力していない
例外の元の流れが守っていない

光明
ネイミングのセンス

TestTokenizerクラス
メソッドTest
保守性、可読性、パフォーマンス全て悪い

Switchの新書き型を利用できる



